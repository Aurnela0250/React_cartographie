---
description:
globs:
alwaysApply: true
---

# Bonnes Pratiques de Commit Messages Git üöÄ

Ce guide d√©crit les standards pour r√©diger des commit messages efficaces selon les conventions modernes de 2024.

## **Structure Standard d'un Commit Message**

### **Format Conventional Commits (Recommand√©)**

```
<type>(<scope>): <subject>
<LIGNE VIDE>
<body>
<LIGNE VIDE>
<footer>
```

**Exemple complet :**

```
feat(auth): implement OAuth2 Google authentication

- Add Google OAuth2 provider configuration
- Create OAuth callback handler with token validation
- Update user model to store OAuth provider data
- Add environment variables for Google client credentials

Closes #123
Breaking Change: Requires new GOOGLE_CLIENT_ID env var
```

## **‚úÖ Bonnes Pratiques**

### **1. Types de Commit Standards**

| Type       | Description                             | Exemple                                              |
| ---------- | --------------------------------------- | ---------------------------------------------------- |
| `feat`     | Nouvelle fonctionnalit√©                 | `feat(user): add profile picture upload`             |
| `fix`      | Correction de bug                       | `fix(auth): resolve token expiration issue`          |
| `docs`     | Documentation                           | `docs(README): update installation guide`            |
| `style`    | Formatage, espaces                      | `style(css): fix indentation in main.css`            |
| `refactor` | Refactoring sans changement fonctionnel | `refactor(api): extract validation logic`            |
| `test`     | Ajout/modification de tests             | `test(user): add unit tests for password validation` |
| `chore`    | T√¢ches de maintenance                   | `chore(deps): update dependencies to latest`         |
| `perf`     | Am√©lioration de performance             | `perf(db): optimize user query with indexes`         |
| `ci`       | Configuration CI/CD                     | `ci(github): add automated testing workflow`         |
| `revert`   | Annulation d'un commit                  | `revert: "feat(auth): add OAuth2 support"`           |

### **2. R√®gles du Subject (Ligne de titre)**

- **‚úÖ Maximum 50 caract√®res**
- **‚úÖ Commencer par une majuscule**
- **‚úÖ Pas de point final**
- **‚úÖ Mode imp√©ratif** (comme si vous donniez un ordre)
- **‚úÖ En anglais** (convention internationale)

**Exemples corrects :**

```
feat(payment): add Stripe integration
fix(validation): prevent SQL injection in search
docs(API): update authentication endpoints
```

**‚ùå Exemples incorrects :**

```
Fixed the login bug.                    # Point final + pass√©
added new feature for payments          # Pas de majuscule + pass√©
Update documentation and fix some bugs  # Trop long + multiple actions
```

### **3. Body (Corps du message)**

- **‚úÖ Ligne vide obligatoire** apr√®s le subject
- **‚úÖ Wrapping √† 72 caract√®res**
- **‚úÖ Expliquer le POURQUOI**, pas le comment
- **‚úÖ Utiliser des listes √† puces** pour les d√©tails
- **‚úÖ Inclure le contexte** et la motivation

**Exemple :**

```
fix(auth): resolve session timeout during file uploads

- Extend session timeout from 30min to 2h for upload operations
- Add heartbeat mechanism to keep session alive during long uploads
- Prevent data loss when users upload large files

The previous 30-minute timeout was causing user frustration
when uploading large documents, resulting in lost work.
```

### **4. Footer (Pied de page)**

- **‚úÖ R√©f√©rences aux issues** : `Closes #123`, `Fixes #456`
- **‚úÖ Breaking changes** : `BREAKING CHANGE: API endpoint changed`
- **‚úÖ Co-auteurs** : `Co-authored-by: Name <email@example.com>`

## **üîß Organisation des Commits avec Plusieurs Fichiers**

### **Principe des Commits Atomiques**

**‚úÖ UN commit = UNE fonctionnalit√© logique**

```bash
# ‚úÖ BON : Grouper les fichiers li√©s √† la m√™me fonctionnalit√©
git add src/auth/login.js src/auth/validation.js tests/auth/
git commit -m "feat(auth): implement password strength validation"

# ‚ùå MAUVAIS : M√©langer des changements non li√©s
git add src/auth/login.js src/ui/header.css src/api/users.js
git commit -m "various fixes and updates"
```

### **Techniques de Staging Avanc√©es**

**1. Staging Interactif (`git add -p`)**

```bash
git add -p                    # R√©viser chaque hunk individuellement
git add -p src/auth/         # Staging partiel d'un dossier
```

**2. Staging S√©lectif**

```bash
git add src/auth/login.js src/auth/validation.js    # Fichiers sp√©cifiques
git add src/auth/                                   # Dossier entier
git add . --dry-run                                # Pr√©visualiser avant staging
```

**3. V√©rification avant Commit**

```bash
git diff --staged            # Voir ce qui va √™tre commit√©
git status                   # √âtat actuel du staging
```

### **Workflow Recommand√© pour Plusieurs Fichiers**

```bash
# 1. R√©viser tous les changements
git status
git diff

# 2. Grouper par fonctionnalit√© logique
git add src/auth/           # Feature 1: Authentication
git commit -m "feat(auth): implement OAuth2 login"

git add src/ui/             # Feature 2: UI improvements
git commit -m "style(ui): update button components"

git add tests/              # Feature 3: Tests
git commit -m "test: add integration tests for auth flow"
```

## **‚ùå Anti-Patterns √† √âviter**

### **Messages Vagues**

```bash
# ‚ùå MAUVAIS
git commit -m "fix stuff"
git commit -m "update"
git commit -m "changes"
git commit -m "wip"

# ‚úÖ BON
git commit -m "fix(api): resolve 500 error in user creation endpoint"
```

### **Commits Trop Gros**

```bash
# ‚ùå MAUVAIS : Tout en un commit
git add .
git commit -m "implement entire user management system"

# ‚úÖ BON : D√©composer en commits logiques
git commit -m "feat(user): add user model and validation"
git commit -m "feat(user): implement CRUD operations"
git commit -m "feat(user): add user authentication"
git commit -m "test(user): add comprehensive test suite"
```

### **M√©lange de Types**

```bash
# ‚ùå MAUVAIS
git commit -m "feat(auth): add login + fix(css): button alignment"

# ‚úÖ BON : S√©parer en deux commits
git commit -m "feat(auth): implement user login functionality"
git commit -m "fix(ui): correct button alignment in header"
```

## **üõ†Ô∏è Outils et Scripts Recommand√©s**

### **Makefile pour les Commits**

Ajouter dans votre [Makefile](mdc:Makefile) :

```makefile
# Validation des commits
.PHONY: commit-lint
commit-lint:
	@echo "üîç Validation du dernier commit message..."
	@git log -1 --pretty=format:"%s" | grep -E "^(feat|fix|docs|style|refactor|test|chore|perf|ci|revert)(\(.+\))?: .{1,50}$$" || \
	(echo "‚ùå Format de commit invalide. Utilisez: type(scope): description" && exit 1)
	@echo "‚úÖ Format de commit valide"

# Commit interactif avec validation
.PHONY: commit
commit:
	@echo "üìù Staging interactif..."
	git add -p
	@echo "üìã R√©vision des changements staged..."
	git diff --staged
	@echo "üí¨ Commit avec √©diteur..."
	git commit -v

# Commit rapide avec validation
.PHONY: quick-commit
quick-commit:
	@read -p "Type (feat/fix/docs/etc): " type; \
	read -p "Scope (optionnel): " scope; \
	read -p "Description: " desc; \
	if [ -n "$$scope" ]; then \
		git commit -m "$$type($$scope): $$desc"; \
	else \
		git commit -m "$$type: $$desc"; \
	fi
	@make commit-lint
```

### **Hooks Git**

**Pre-commit hook** (`.git/hooks/pre-commit`) :

```bash
#!/bin/sh
# Validation avant commit
make commit-lint 2>/dev/null || echo "‚ö†Ô∏è  Attention au format du commit"
```

### **Outils CLI Recommand√©s**

```bash
# Installation d'outils de validation
pnpm install -g @commitlint/cli @commitlint/config-conventional
pnpm install -g commitizen cz-conventional-changelog

# Configuration commitizen
echo '{ "path": "cz-conventional-changelog" }' > ~/.czrc
```

## **üìä Exemples Pratiques par Contexte**

### **Bug Fix avec Plusieurs Fichiers**

```bash
# Contexte: Bug dans l'authentification affectant 3 fichiers
git add src/auth/jwt.js src/middleware/auth.js tests/auth/jwt.test.js
git commit -m "fix(auth): resolve JWT token validation race condition

- Add mutex lock for token refresh operations
- Update middleware to handle concurrent requests
- Add test cases for race condition scenarios

Fixes #456 - Users experiencing random logouts"
```

### **Nouvelle Feature Complexe**

```bash
# Commit 1: Mod√®le de donn√©es
git add src/models/subscription.js src/migrations/
git commit -m "feat(subscription): add subscription model and migration"

# Commit 2: API endpoints
git add src/routes/subscription.js src/controllers/subscription.js
git commit -m "feat(subscription): implement CRUD API endpoints"

# Commit 3: Tests
git add tests/subscription/
git commit -m "test(subscription): add comprehensive test suite"

# Commit 4: Documentation
git add docs/api/subscription.md
git commit -m "docs(subscription): add API documentation"
```

### **Refactoring Majeur**

```bash
git add src/utils/ src/services/
git commit -m "refactor(services): extract common utilities

- Move validation helpers to utils/validation.js
- Extract email service from user service
- Improve code reusability across modules

No functional changes, improves maintainability"
```

## **üéØ Conseils pour les √âquipes**

### **Convention d'√âquipe**

- **‚úÖ D√©finir les scopes** utilis√©s dans le projet
- **‚úÖ Documenter les types** sp√©cifiques au projet
- **‚úÖ Utiliser des templates** de commit messages
- **‚úÖ R√©viser les commits** en code review

### **Exemple de Scopes Projet**

```
(auth)     - Authentification et autorisation
(api)      - Endpoints API
(ui)       - Interface utilisateur
(db)       - Base de donn√©es et migrations
(config)   - Configuration et environnement
(deploy)   - D√©ploiement et infrastructure
(docs)     - Documentation
```

### **Template de Commit**

Cr√©er `.gitmessage` :

```
# <type>(<scope>): <subject>
#
# <body>
#
# <footer>

# Types: feat, fix, docs, style, refactor, test, chore, perf, ci, revert
# Scope: auth, api, ui, db, config, deploy, docs
# Subject: 50 chars max, imperative, no period
# Body: 72 chars per line, explain WHY not HOW
# Footer: Closes #123, BREAKING CHANGE: description
```

Puis configurer :

```bash
git config commit.template .gitmessage
```

## **üîç Validation et Qualit√©**

### **Checklist avant Commit**

- [ ] **Un seul concept** par commit
- [ ] **Message descriptif** et complet
- [ ] **Tests passent** (`make test`)
- [ ] **Linting OK** (`make lint`)
- [ ] **Fichiers li√©s** seulement
- [ ] **Pas de secrets** ou donn√©es sensibles

### **Commandes de V√©rification**

```bash
# R√©vision compl√®te avant commit
git status                    # √âtat du staging
git diff --staged            # Changements √† commiter
git log --oneline -10        # Historique r√©cent
make test                    # V√©rifier que tout fonctionne
```

---

**üí° Rappel** : Un bon commit message raconte une histoire claire de l'√©volution du code. Pensez aux futurs d√©veloppeurs (y compris vous-m√™me) qui liront ces messages dans 6 mois !
